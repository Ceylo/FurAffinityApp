name: Create Release
on:
  push:
    tags:
      - '*'
jobs:
  Build-App:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - uses: mxcl/xcodebuild@v1
        with:
          action: none
      - name: Archive App
        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          qualified_app_name="FurAffinity-${GITHUB_REF_NAME}-${git_hash}"
          archive_path=$(pwd)/${qualified_app_name}.xcarchive
          xcodebuild -disableAutomaticPackageResolution -scheme FurAffinity -destination generic/platform=iOS -configuration Release archive -archivePath "${archive_path}"
          mkdir Payload
          cp -Rp ${archive_path}/Products/Applications/* Payload/
          zip -r "FurAffinity-${GITHUB_REF_NAME}-${git_hash}.ipa" Payload
      - name: Upload IPA
        uses: actions/upload-artifact@v2
        with:
          name: IPA
          path: FurAffinity-*.ipa
          if-no-files-found: error
      - name: Upload xcarchive
        uses: actions/upload-artifact@v2
        with:
          name: Xcode Archive
          path: ./*.xcarchive
          if-no-files-found: error
      - name: Create Release
        uses: ncipollo/release-action@v1
        id: create_release
        with:
          name: FurAffinity ${GITHUB_REF_NAME}
          artifacts: FurAffinity-*.ipa
          token: ${{ secrets.GITHUB_TOKEN }}
