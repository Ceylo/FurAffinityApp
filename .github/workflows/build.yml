name: Build App
on: [push, workflow_dispatch]
jobs:
  Build-App:
    runs-on: macos-26
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
          cp $PP_PATH ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
      - name: Update Secrets
        env:
          AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          sed -i "" "s/amplitudeApiKey = \"Your App Secret\"/amplitudeApiKey = \"${AMPLITUDE_API_KEY}\"/" "FurAffinity/Secrets.swift"
          sed -i "" "s/PRODUCT_BUNDLE_IDENTIFIER = com.example.id1234;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID};/" "FurAffinity.xcodeproj/project.pbxproj"
      - uses: mxcl/xcodebuild@v3
        with:
          action: none
          xcode: ~26.0
      - name: Build App
        run: |
          NSUnbufferedIO=YES set -o pipefail && xcodebuild -disableAutomaticPackageResolution -scheme FurAffinity -destination 'platform=iOS Simulator,name=iPhone 17' -configuration Debug build 2>&1 | tee BuildLogs.txt | xcbeautify
      - name: Run Tests
        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          fsfriendly_git_ref=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          qualified_app_name="FurAffinity-${fsfriendly_git_ref}-${git_hash}"
          results_path=$(pwd)/${qualified_app_name}.xcresult
          NSUnbufferedIO=YES set -o pipefail && xcodebuild -disableAutomaticPackageResolution -scheme FurAffinity -destination 'platform=iOS Simulator,name=iPhone 17' -resultBundlePath "${results_path}" test 2>&1 | tee TestLogs.txt | xcbeautify
          zip -rq "${qualified_app_name}.xcresult.zip" "${qualified_app_name}.xcresult"
      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: Xcode Logs
          path: ./*Logs.txt
          if-no-files-found: error
      - name: Upload Tests Results
        uses: actions/upload-artifact@v4
        with:
          name: Xcode Test Results
          path: ./*.xcresult
          if-no-files-found: error
